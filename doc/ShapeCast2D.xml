<?xml version="1.0" encoding="UTF-8" ?>
<class name="ShapeCast2D" inherits="Node2D" version="3.2">
	<brief_description>
		Node for physics collision sweep and immediate overlap queries. Similar to the [RayCast2D] node.
	</brief_description>
	<description>
		Unlike [RayCast2D], shape casting allows to detect collision objects along the cast area (for instance, beam weapons).
		Immediate collision overlaps can be easily done with the [member cast_to] set to [code]Vector2(0, 0)[/code] and by calling [method force_shapecast_update] within the same [b]physics_frame[/b]. This also helps to overcome some limitations of [Area2D] when used as a continuos detection area, often requiring waiting a couple of frames before collision information is available to [Area2D] nodes, and when using the signals creates unnecessary complexity.
		This node can detect multiple collision objects. If you want to use this just like [RayCast2D], use corresponding [code]get_closest_*[/code] methods instead. Cannot detect all objects along the cast motion, but only when collision occurs (same as in [RayCast2D]).
		[b]Note:[/b] shape casting is more computationally expensive compared to ray casting.
	</description>
	<tutorials>
	</tutorials>
	<methods>
		<method name="add_exception">
			<return type="void">
			</return>
			<argument index="0" name="node" type="Object">
			</argument>
			<description>
				Adds a collision exception so the shape does not report collisions with the specified node.
			</description>
		</method>
		<method name="add_exception_rid">
			<return type="void">
			</return>
			<argument index="0" name="rid" type="RID">
			</argument>
			<description>
				Adds a collision exception so the shape does not report collisions with the specified [RID].
			</description>
		</method>
		<method name="clear_exceptions">
			<return type="void">
			</return>
			<description>
				Removes all collision exceptions for this shape.
			</description>
		</method>
		<method name="force_shapecast_update">
			<return type="void">
			</return>
			<description>
				Updates the collision information for the shape. Use this method to update the collision information immediately instead of waiting for the next [code]_physics_process[/code] call, for example if the shape or its parent has changed state.
				[b]Note:[/b] [code]enabled == true[/code] is not required for this to work.
			</description>
		</method>
		<method name="get_closest_collider" qualifiers="const">
			<return type="Object">
			</return>
			<description>
				Returns the first object that the shape intersects, or [code]null[/code] if no object is intersecting the shape (i.e. [method is_colliding] returns [code]false[/code]).
			</description>
		</method>
		<method name="get_closest_collider_shape" qualifiers="const">
			<return type="int">
			</return>
			<description>
				Returns the shape ID of the first object that the shape intersects, or [code]0[/code] if no object is intersecting the shape (i.e. [method is_colliding] returns [code]false[/code]).
			</description>
		</method>
		<method name="get_closest_collision_normal" qualifiers="const">
			<return type="Vector2">
			</return>
			<description>
				Returns the normal of the closest intersecting object's shape at the collision point.
			</description>
		</method>
		<method name="get_closest_collision_point" qualifiers="const">
			<return type="Vector2">
			</return>
			<description>
				Returns the collision point at which the shape intersects the closest object.
				[b]Note:[/b] this point is in the [b]global[/b] coordinate system.
			</description>
		</method>
		<method name="get_closest_collision_safe_distance" qualifiers="const">
			<return type="float">
			</return>
			<description>
				The fraction of the motion (determined by [member cast_to]) of how far the shape can move without triggering a collision.
			</description>
		</method>
		<method name="get_closest_collision_unsafe_distance" qualifiers="const">
			<return type="float">
			</return>
			<description>
				The fraction of the motion (determined by [member cast_to]) when the shape triggers a collision.
			</description>
		</method>
		<method name="get_collider" qualifiers="const">
			<return type="Object">
			</return>
			<argument index="0" name="index" type="int">
			</argument>
			<description>
				Returns the first object that the shape intersects, or [code]null[/code] if no object is intersecting the shape (i.e. [method is_colliding] returns [code]false[/code]).
			</description>
		</method>
		<method name="get_collider_shape" qualifiers="const">
			<return type="int">
			</return>
			<argument index="0" name="index" type="int">
			</argument>
			<description>
				Returns the shape ID of one of the multiple collisions at [code]index[/code] that the shape intersects, or [code]0[/code] if no object is intersecting the shape (i.e. [method is_colliding] returns [code]false[/code]).
			</description>
		</method>
		<method name="get_collision_count" qualifiers="const">
			<return type="int">
			</return>
			<description>
				The number of collisions detected. Use this to iterate over multiple collisions as provided by [method get_collider], [method get_collider_shape], [method get_collision_point], and [method get_collision_normal] methods.
			</description>
		</method>
		<method name="get_collision_mask_bit" qualifiers="const">
			<return type="bool">
			</return>
			<argument index="0" name="bit" type="int">
			</argument>
			<description>
				Returns an individual bit on the collision mask.
			</description>
		</method>
		<method name="get_collision_normal" qualifiers="const">
			<return type="Vector2">
			</return>
			<argument index="0" name="index" type="int">
			</argument>
			<description>
				Returns the normal containing one of the multiple collisions at [code]index[/code] of the intersecting object.
			</description>
		</method>
		<method name="get_collision_point" qualifiers="const">
			<return type="Vector2">
			</return>
			<argument index="0" name="index" type="int">
			</argument>
			<description>
				Returns the collision point containing one of the multiple collisions at [code]index[/code] at which the shape intersects the object.
				[b]Note:[/b] this point is in the [b]global[/b] coordinate system.
			</description>
		</method>
		<method name="is_colliding" qualifiers="const">
			<return type="bool">
			</return>
			<description>
				Returns whether any object is intersecting with the shape's vector (considering the vector length).
			</description>
		</method>
		<method name="remove_exception">
			<return type="void">
			</return>
			<argument index="0" name="node" type="Object">
			</argument>
			<description>
				Removes a collision exception so the shape does report collisions with the specified node.
			</description>
		</method>
		<method name="remove_exception_rid">
			<return type="void">
			</return>
			<argument index="0" name="rid" type="RID">
			</argument>
			<description>
				Removes a collision exception so the shape does report collisions with the specified [RID].
			</description>
		</method>
		<method name="set_collision_mask_bit">
			<return type="void">
			</return>
			<argument index="0" name="bit" type="int">
			</argument>
			<argument index="1" name="value" type="bool">
			</argument>
			<description>
				Sets or clears individual bits on the collision mask. This makes selecting the areas scanned easier.
			</description>
		</method>
	</methods>
	<members>
		<member name="cast_to" type="Vector2" setter="set_cast_to" getter="get_cast_to" default="Vector2( 0, 50 )">
			The shape's destination point, relative to this node's [code]position[/code].
		</member>
		<member name="collide_with_areas" type="bool" setter="set_collide_with_areas" getter="is_collide_with_areas_enabled" default="false">
			If [code]true[/code], collision with [Area2D]s will be reported.
		</member>
		<member name="collide_with_bodies" type="bool" setter="set_collide_with_bodies" getter="is_collide_with_bodies_enabled" default="true">
			If [code]true[/code], collision with [PhysicsBody2D]s will be reported.
		</member>
		<member name="collision_mask" type="int" setter="set_collision_mask" getter="get_collision_mask" default="1">
			The shape's collision mask. Only objects in at least one collision layer enabled in the mask will be detected.
		</member>
		<member name="collision_result" type="Array" setter="" getter="_get_collision_result" default="[  ]">
			A complete collision information. The data returned is the same as in the [method Physics2DDirectSpaceState.get_rest_info] method.
		</member>
		<member name="enabled" type="bool" setter="set_enabled" getter="is_enabled" default="true">
			If [code]true[/code], collisions will be reported.
		</member>
		<member name="exclude_parent" type="bool" setter="set_exclude_parent_body" getter="get_exclude_parent_body" default="true">
			If [code]true[/code], the parent node will be excluded from collision detection.
		</member>
		<member name="margin" type="float" setter="set_margin" getter="get_margin" default="0.0">
			The collision margin for the shape. Large margin speeds up the performance at the cost of precision.
		</member>
		<member name="max_results" type="int" setter="set_max_results" getter="get_max_results" default="32">
			The number of intersections can be limited with this parameter, to reduce the processing time.
		</member>
		<member name="shape" type="Shape2D" setter="set_shape" getter="get_shape">
			Any [Shape2D] used for collision queries.
		</member>
	</members>
	<constants>
	</constants>
</class>
