<?xml version="1.0" encoding="UTF-8" ?>
<class name="PolyShape2D" inherits="Node2D" version="3.2">
	<brief_description>
		The base class for implementing decomposition or mesh-based classes.
	</brief_description>
	<description>
		Takes outlines from [PolyNode2D] added as children of this node and decomposes them into shapes determined by [member build_mode].
		This class is used as a base for classes such as [PolyCollisionShape2D] and other related mesh-based objects in 2D.
	</description>
	<tutorials>
	</tutorials>
	<methods>
		<method name="_apply_shapes" qualifiers="virtual">
			<return type="void">
			</return>
			<description>
				Called whenever [PolyNode2D] outlines are updated, [PolyNode2D] children are added/removed, and when [member build_mode] is changed.
				Use [method get_shapes] to construct new entities such as collision [Shape2D]s from outlines. See also [PolyCollisionShape2D].
			</description>
		</method>
		<method name="get_shapes">
			<return type="Array">
			</return>
			<description>
				Returns an array of [PoolVector2Array] polygon outlines previously built from [member build_mode].
			</description>
		</method>
	</methods>
	<members>
		<member name="build_mode" type="int" setter="set_build_mode" getter="get_build_mode" enum="PolyShape2D.BuildMode" default="0">
			The mode to build shapes from [PolyNode2D] children.
		</member>
	</members>
	<signals>
		<signal name="shapes_applied">
			<description>
				Emitted whenever the shapes are built and applied to some other object. The signal is emitted after [method _apply_shapes] is called in all cases, so you don't have to emit the signal manually.
			</description>
		</signal>
	</signals>
	<constants>
		<constant name="BUILD_TRIANGLES" value="0" enum="BuildMode">
			Decomposes outlines into triangle shapes.
		</constant>
		<constant name="BUILD_CONVEX" value="1" enum="BuildMode">
			Decomposes outlines into convex shapes.
		</constant>
		<constant name="BUILD_SEGMENTS" value="2" enum="BuildMode">
			Filters outlines into outer outlines (mostly used to implement concave shapes).
		</constant>
	</constants>
</class>
