<?xml version="1.0" encoding="UTF-8" ?>
<class name="GoostGeometry2D" inherits="Object" version="3.2">
	<brief_description>
		[Geometry] singleton extension.
	</brief_description>
	<description>
		Performs various geometry-related operations. Provides simple polygon clipping, offsetting and decomposition functionality, and other geometry utility operations mostly revolving around polygons and polylines.
		The methods for polygon operations in this class operate on single polygons only. For more advanced operations on multiple polygons, refer to [PolyBoolean2D], [PolyOffset2D], [PolyDecomp2D] classes instead.
	</description>
	<tutorials>
		<link>https://goost.readthedocs.io/en/gd3/components/geometry.html</link>
	</tutorials>
	<methods>
		<method name="bounding_rect" qualifiers="const">
			<return type="Rect2">
			</return>
			<argument index="0" name="points" type="PoolVector2Array">
			</argument>
			<description>
				Computes the axis-aligned bounding rectangle of given points.
			</description>
		</method>
		<method name="circle" qualifiers="const">
			<return type="PoolVector2Array">
			</return>
			<argument index="0" name="radius" type="float">
			</argument>
			<argument index="1" name="max_error" type="float" default="0.25">
			</argument>
			<description>
				Generates a closed path approximating the shape of a circle with the specified radius.
				The [code]max_error[/code] parameter represents the maximum gap in pixels allowed between a circle segment and the boundary of the mathematical circle, with low values increasing the number of vertices. The maximum number of vertices returned is 4096. See also [method regular_polygon].
			</description>
		</method>
		<method name="clip_polygons" qualifiers="const">
			<return type="Array">
			</return>
			<argument index="0" name="polygon_a" type="PoolVector2Array">
			</argument>
			<argument index="1" name="polygon_b" type="PoolVector2Array">
			</argument>
			<description>
				Performs [constant PolyBoolean2D.OP_DIFFERENCE] between individual polygons.
			</description>
		</method>
		<method name="clip_polyline_with_polygon" qualifiers="const">
			<return type="Array">
			</return>
			<argument index="0" name="polyline" type="PoolVector2Array">
			</argument>
			<argument index="1" name="polygon" type="PoolVector2Array">
			</argument>
			<description>
				Clips a single [code]polyline[/code] against a single [code]polygon[/code] and returns an array of clipped polylines. This performs [constant PolyBoolean2D.OP_DIFFERENCE] between the polyline and the polygon. Returns an empty array if the [code]polygon[/code] completely encloses [code]polyline[/code]. This operation can be thought of as cutting a line with a closed shape.
			</description>
		</method>
		<method name="decompose_polygon" qualifiers="const">
			<return type="Array">
			</return>
			<argument index="0" name="polygon" type="PoolVector2Array">
			</argument>
			<description>
				Partitions a single polygon into a set of convex polygons with [constant PolyDecomp2D.DECOMP_CONVEX_HM].
			</description>
		</method>
		<method name="deflate_polygon" qualifiers="const">
			<return type="Array">
			</return>
			<argument index="0" name="polygon" type="PoolVector2Array">
			</argument>
			<argument index="1" name="delta" type="float">
			</argument>
			<description>
				Grows a polygon by [code]delta[/code] pixels. See also [method PolyOffset2D.deflate_polygons].
			</description>
		</method>
		<method name="deflate_polyline" qualifiers="const">
			<return type="Array">
			</return>
			<argument index="0" name="polyline" type="PoolVector2Array">
			</argument>
			<argument index="1" name="delta" type="float">
			</argument>
			<description>
				Grows a single non-closed path into a polygon by [code]delta[/code] pixels. See also [method PolyOffset2D.deflate_polylines].
			</description>
		</method>
		<method name="exclude_polygons" qualifiers="const">
			<return type="Array">
			</return>
			<argument index="0" name="polygon_a" type="PoolVector2Array">
			</argument>
			<argument index="1" name="polygon_b" type="PoolVector2Array">
			</argument>
			<description>
				Performs [constant PolyBoolean2D.OP_XOR] between individual polygons.
			</description>
		</method>
		<method name="inflate_polygon" qualifiers="const">
			<return type="Array">
			</return>
			<argument index="0" name="polygon" type="PoolVector2Array">
			</argument>
			<argument index="1" name="delta" type="float">
			</argument>
			<description>
				Shrinks a polygon by [code]delta[/code] pixels. See also [method PolyOffset2D.inflate_polygons].
			</description>
		</method>
		<method name="intersect_polygons" qualifiers="const">
			<return type="Array">
			</return>
			<argument index="0" name="polygon_a" type="PoolVector2Array">
			</argument>
			<argument index="1" name="polygon_b" type="PoolVector2Array">
			</argument>
			<description>
				Performs [constant PolyBoolean2D.OP_INTERSECTION] between individual polygons.
			</description>
		</method>
		<method name="intersect_polyline_with_polygon" qualifiers="const">
			<return type="Array">
			</return>
			<argument index="0" name="polyline" type="PoolVector2Array">
			</argument>
			<argument index="1" name="polygon" type="PoolVector2Array">
			</argument>
			<description>
				Intersects polyline with polygon and returns an array of intersected polylines. This performs [constant PolyBoolean2D.OP_INTERSECTION] between the polyline and the polygon. This operation can be thought of as chopping a line with a closed shape.
			</description>
		</method>
		<method name="merge_polygons" qualifiers="const">
			<return type="Array">
			</return>
			<argument index="0" name="polygon_a" type="PoolVector2Array">
			</argument>
			<argument index="1" name="polygon_b" type="PoolVector2Array">
			</argument>
			<description>
				Performs [constant PolyBoolean2D.OP_UNION] between individual polygons. If you need to merge multiple polygons, use [method PolyBoolean2D.merge_polygons] instead.
			</description>
		</method>
		<method name="point_in_polygon" qualifiers="const">
			<return type="int">
			</return>
			<argument index="0" name="point" type="Vector2">
			</argument>
			<argument index="1" name="polygon" type="PoolVector2Array">
			</argument>
			<description>
				Returns +1 if the point is [i]inside[/i] the polygon, 0 if the point is [i]outside[/i] the polygon, and -1 if the point is [i]exactly[/i] on the polygon's boundary. Supports arbitrary polygons.
			</description>
		</method>
		<method name="polygon_area" qualifiers="const">
			<return type="float">
			</return>
			<argument index="0" name="polygon" type="PoolVector2Array">
			</argument>
			<description>
				Returns [code]polygon[/code]'s positive or negative area depending on whether vertices are ordered in clockwise or counterclockwise order. See also [method Geometry.is_polygon_clockwise]. If the order is clockwise, the polygon can be interpreted as an inner polygon (hole), otherwise it's an outer polygon (boundary).
			</description>
		</method>
		<method name="polygon_centroid" qualifiers="const">
			<return type="Vector2">
			</return>
			<argument index="0" name="polygon" type="PoolVector2Array">
			</argument>
			<description>
				Calculates the centroid (also known as "center of mass" or "center of gravity") of the [code]polygon[/code] and returns the consistent result regardless of polygon orientation, see [method Geometry.is_polygon_clockwise]. For accurate results, the polygon must be strictly simple, meaning there should be no self-intersecting edges.
			</description>
		</method>
		<method name="polygon_perimeter" qualifiers="const">
			<return type="float">
			</return>
			<argument index="0" name="polygon" type="PoolVector2Array">
			</argument>
			<description>
				Returns the perimeter of an arbitrary polygon. See also [method polyline_length].
			</description>
		</method>
		<method name="polyline_length" qualifiers="const">
			<return type="float">
			</return>
			<argument index="0" name="polyline" type="PoolVector2Array">
			</argument>
			<description>
				Returns the total length of the segments representing the polyline. See also [method polygon_perimeter].
			</description>
		</method>
		<method name="regular_polygon" qualifiers="const">
			<return type="PoolVector2Array">
			</return>
			<argument index="0" name="sides" type="int">
			</argument>
			<argument index="1" name="size" type="float">
			</argument>
			<description>
				Generates a regular polygon (triangle, rectangle, pentagon, hexagon etc.) with all equal sides and angles. The specified size can be seen as a radius, with an increasing number of sides approximating a [method circle].
				The order of vertices returned is counterclockwise which makes it an outer polygon by default. To convert it to an inner polygon specifically, use [method PoolVector2Array.invert].
			</description>
		</method>
		<method name="triangulate_polygon" qualifiers="const">
			<return type="Array">
			</return>
			<argument index="0" name="polygon" type="PoolVector2Array">
			</argument>
			<description>
				Decomposes the polygon into individual triangles using [constant PolyDecomp2D.DECOMP_TRIANGLES_MONO].
			</description>
		</method>
	</methods>
	<constants>
	</constants>
</class>
