#!/usr/bin/env python
import os

Import("env")
Import("env_goost")

env_thirdparty = env_goost.Clone()

env_thirdparty.Prepend(CPPPATH=[os.path.realpath(".")])
env_goost.Prepend(CPPPATH=[os.path.realpath(".")])

if env["goost_math_enabled"]:
    env_thirdparty.add_source_files(env.modules_sources, "clipper/*.cpp")
if env["goost_image_enabled"]:
    # Leptonica
    env_leptonica = env_thirdparty.Clone()
    """
    Function prototypes may need to be re-generated manually with:

        sudo apt install leptonica-progs
        cd leptonica
        xtractprotos -prestring=LEPT_DLL -protos=inline $(cat ../leptonica_sources.txt)

    This generates `allheaders.h` with only the used functions for all 
    the Leptonica sources listed in `leptonica_sources.txt` file.

    If you need to find missing sources needed for new features:
     
        ls *.c > ../leptonica_sources.txt
        git diff
    """
    leptonica_sources = []
    with open("leptonica_sources.txt", "r") as f:
        leptonica_sources = f.read().splitlines()

    leptonica_sources = [Glob("leptonica/" + f) for f in leptonica_sources]
    env_leptonica.add_source_files(env.modules_sources, leptonica_sources)

    if env_goost["target"] in ["debug", "release_debug"]:
        env_leptonica.Prepend(CPPDEFINES=["DEBUG"])
    if env_goost["target"] != "debug":
        env_leptonica.Prepend(CPPDEFINES=["NO_CONSOLE_IO"])
    env_leptonica.disable_warnings()

    # Exoquant
    env_thirdparty.add_source_files(env.modules_sources, "exoquant/*.c")
    # HQX
    env_thirdparty.add_source_files(env.modules_sources, "hqx/*.cc")

env_thirdparty.disable_warnings()

if env["platform"] in ["server"]:
    # Disable all previously defined sanitizers for thirdparty code in Goost.
    # TODO: sanitizer bugs need to be fixed, but they currently block CI tests.
    # This doesn't seem to work... but leaving here anyway.
    san_flags = ["-fsanitize=undefined", "-fsanitize=address", "-fsanitize=leak", "-fsanitize=thread"]
    env_thirdparty["CCFLAGS"] = [x for x in env_thirdparty["CCFLAGS"] if not x in san_flags]
    env_thirdparty["LINKFLAGS"] = [x for x in env_thirdparty["CCFLAGS"] if not x in san_flags]
    env_thirdparty.Append(CCFLAGS=["-fno-sanitize=all"])
    env_thirdparty.Append(LINKFLAGS=["-fno-sanitize=all"])
