#!/usr/bin/env python

import os
import goost

import methods

Import("env")
env_goost = env.Clone()

# Make include paths independent of Goost location.
# The module's name should not be changed as include paths depend on it.
# This avoids potential ambiguity with Godot's own include paths.
env_goost.Prepend(CPPPATH=[os.path.realpath(os.curdir), os.path.dirname(os.path.realpath(os.curdir))])

# Define components to build.
for name in goost.get_components():
    opt = "goost_%s_enabled" % (name)
    if env_goost[opt]:
        env_goost.Prepend(CPPDEFINES=[opt.upper()])

env_goost.Prepend(CPPDEFINES={"SCALE_FACTOR": env["goost_scale_factor"]})

# Workaround issues.
if os.path.basename(env["CC"]) in ["clang", "clang++", "emcc", "em++"]:
    # Produces false-positives in Godot 3.2 with
    # GDCLASS macro expansion in inherited classes.
    env_goost.Append(CCFLAGS=["-Wno-inconsistent-missing-override"])

# Also requires libpng headers
if env["builtin_libpng"]:
    env_goost.Prepend(CPPPATH=["#thirdparty/libpng"])

# Build subdirs, the build order is dependent on the link order.
subdirs = [
    "core",
    "scene",
    "editor",
    "thirdparty",
    # "modules", # Cannot build directly, use `custom_modules` option explicitly.
]
SConscript(dirs=subdirs, name="SCsub", exports="env_goost")

env_goost.add_source_files(env.modules_sources, "*.cpp")
